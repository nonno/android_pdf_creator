/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.pablog178.pdfcreator.android;

import java.io.OutputStream;
import java.util.HashMap;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.io.TiBaseFile;
import org.appcelerator.titanium.io.TiFileFactory;
import org.appcelerator.titanium.proxy.TiViewProxy;
import org.appcelerator.titanium.view.TiUIView;

import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.drawable.Drawable;
import android.graphics.pdf.PdfDocument;
import android.graphics.pdf.PdfDocument.Page;
import android.graphics.pdf.PdfDocument.PageInfo;
import android.view.View;
import android.webkit.WebView;

@Kroll.module(name="Pdfcreator", id="com.pablog178.pdfcreator.android")
public class PdfcreatorModule extends KrollModule
{

	// Standard Debugging variables
	private static final String MODULE_NAME = "PdfcreatorModule";
	private static final String PROXY_NAME = "PDF_PROXY";

	// Private members
	private static TiApplication app;
	private TiUIView 	view 	= null;
	private String 		fileName = "default_name.pdf";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public PdfcreatorModule(){
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication myApp)
	{
		Log.d(MODULE_NAME, "inside onAppCreate");
		app = myApp;
		// put module init code that needs to run when the application is created
	}

	// Methods

	/**
	 * Generates a new PDF based on the given view, withe the given fileName on the app directory
	 */
	@Kroll.method
	public void generatePDF(HashMap args){
		Log.i(PROXY_NAME, "generatePDF()");

		if(args.containsKey("fileName")){
			Object fileName = args.get("fileName");
			if(fileName instanceof String){
				this.fileName = (String) fileName;
				Log.i(PROXY_NAME, "fileName: " + this.fileName);
			}
		} else return;

		if(args.containsKey("view")){
			Object viewObject = args.get("view");
			if(viewObject instanceof TiViewProxy){
				TiViewProxy viewProxy = (TiViewProxy) viewObject;
				this.view = viewProxy.getOrCreateView();
				if(this.view == null){
					Log.e(PROXY_NAME, "NO VIEW was created!!");
					return;
				}
				Log.i(PROXY_NAME, "view: " + this.view.toString());
			}
		} else return;



		TiBaseFile file = TiFileFactory.createTitaniumFile(this.fileName, true);
		Log.i(PROXY_NAME, "file full path: " + file.nativePath());
		try {
			Resources 		appResources 	= app.getResources();
			OutputStream 	outputStream 	= file.getOutputStream();
			final int 		PDF_WIDTH 		= 612;
			final int 		PDF_HEIGHT 		= 792;
			
			PdfDocument 	pdfDocument 	= new PdfDocument();
			PageInfo 		pageInfo 		= new PageInfo.Builder(PDF_WIDTH, PDF_HEIGHT, 1).create();
			Page 			page 			= pdfDocument.startPage(pageInfo);


			WebView 		view 			= (WebView) this.view.getNativeView();
			int 			viewWidth 		= view.capturePicture().getWidth();
			int 			viewHeight 		= view.capturePicture().getHeight();

			Log.i(PROXY_NAME, "viewWidth: " + viewWidth);
			Log.i(PROXY_NAME, "viewHeight: " + viewHeight);

			Bitmap 			viewBitmap 		= Bitmap.createBitmap(viewWidth, viewHeight, Bitmap.Config.ARGB_8888);
			float 			density 		= appResources.getDisplayMetrics().density;

			Canvas 			canvas 			= new Canvas(viewBitmap);
			Matrix 			matrix 			= new Matrix();

			Drawable bgDrawable = view.getBackground();
	        if (bgDrawable != null){
				bgDrawable.draw(canvas);
			} else {
				canvas.drawColor(Color.WHITE);
			}
			view.draw(canvas);

			float scaleFactorWidth 	= 1 / ((float)viewWidth  / (float)PDF_WIDTH);
			float scaleFactorHeight = 1 / ((float)viewHeight / (float)PDF_HEIGHT);

			Log.i(PROXY_NAME, "scaleFactorWidth: " + scaleFactorWidth);
			Log.i(PROXY_NAME, "scaleFactorHeight: " + scaleFactorHeight);

			matrix.setScale(scaleFactorWidth, scaleFactorWidth);

			Canvas pdfCanvas = page.getCanvas();
			pdfCanvas.drawBitmap(viewBitmap, matrix, null);

			// view.draw(page.getCanvas());

			pdfDocument.finishPage(page);
			pdfDocument.writeTo(outputStream);
			pdfDocument.close();

		} catch (Exception exception){
			Log.e(PROXY_NAME, "Error: " + exception.toString());
		}
	}
}

